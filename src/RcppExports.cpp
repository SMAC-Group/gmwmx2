// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gen_flicker
arma::vec gen_flicker(int N, double sigma);
RcppExport SEXP _gmwmx2_gen_flicker(SEXP NSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_flicker(N, sigma));
    return rcpp_result_gen;
END_RCPP
}
// create_var_cov_flicker
arma::mat create_var_cov_flicker(double sigma_pl, int N);
RcppExport SEXP _gmwmx2_create_var_cov_flicker(SEXP sigma_plSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma_pl(sigma_plSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(create_var_cov_flicker(sigma_pl, N));
    return rcpp_result_gen;
END_RCPP
}
// create_U_flicker
arma::mat create_U_flicker(int N);
RcppExport SEXP _gmwmx2_create_U_flicker(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(create_U_flicker(N));
    return rcpp_result_gen;
END_RCPP
}
// mean_all_diagonals
arma::vec mean_all_diagonals(arma::mat matrix);
RcppExport SEXP _gmwmx2_mean_all_diagonals(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_all_diagonals(matrix));
    return rcpp_result_gen;
END_RCPP
}
// mean_all_upper_diagonals
arma::vec mean_all_upper_diagonals(arma::mat matrix);
RcppExport SEXP _gmwmx2_mean_all_upper_diagonals(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_all_upper_diagonals(matrix));
    return rcpp_result_gen;
END_RCPP
}
// compute_h_cpp
arma::vec compute_h_cpp(double kappa, int N);
RcppExport SEXP _gmwmx2_compute_h_cpp(SEXP kappaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_h_cpp(kappa, N));
    return rcpp_result_gen;
END_RCPP
}
// return_cumsum_product_of_shifted_vector_cpp
arma::vec return_cumsum_product_of_shifted_vector_cpp(const arma::vec& vec_x, int shift);
RcppExport SEXP _gmwmx2_return_cumsum_product_of_shifted_vector_cpp(SEXP vec_xSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type vec_x(vec_xSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(return_cumsum_product_of_shifted_vector_cpp(vec_x, shift));
    return rcpp_result_gen;
END_RCPP
}
// vec_mean_autocov_per_diag_cpp
arma::vec vec_mean_autocov_per_diag_cpp(double kappa, int N);
RcppExport SEXP _gmwmx2_vec_mean_autocov_per_diag_cpp(SEXP kappaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_mean_autocov_per_diag_cpp(kappa, N));
    return rcpp_result_gen;
END_RCPP
}
// vec_mean_autocov_per_diag_2_cpp
arma::vec vec_mean_autocov_per_diag_2_cpp(double kappa, int N);
RcppExport SEXP _gmwmx2_vec_mean_autocov_per_diag_2_cpp(SEXP kappaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_mean_autocov_per_diag_2_cpp(kappa, N));
    return rcpp_result_gen;
END_RCPP
}
// var_cov_powerlaw_cpp
arma::mat var_cov_powerlaw_cpp(double sigma2, double kappa, int n);
RcppExport SEXP _gmwmx2_var_cov_powerlaw_cpp(SEXP sigma2SEXP, SEXP kappaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(var_cov_powerlaw_cpp(sigma2, kappa, n));
    return rcpp_result_gen;
END_RCPP
}
// wn_autocovariance
arma::vec wn_autocovariance(double sigma2_wn, int n);
RcppExport SEXP _gmwmx2_wn_autocovariance(SEXP sigma2_wnSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma2_wn(sigma2_wnSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(wn_autocovariance(sigma2_wn, n));
    return rcpp_result_gen;
END_RCPP
}
// fast_toeplitz_matrix_from_vector_cpp
arma::mat fast_toeplitz_matrix_from_vector_cpp(const arma::vec& v);
RcppExport SEXP _gmwmx2_fast_toeplitz_matrix_from_vector_cpp(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_toeplitz_matrix_from_vector_cpp(v));
    return rcpp_result_gen;
END_RCPP
}
// compute_power_of_a_base
arma::vec compute_power_of_a_base(int x, int J);
RcppExport SEXP _gmwmx2_compute_power_of_a_base(SEXP xSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_power_of_a_base(x, J));
    return rcpp_result_gen;
END_RCPP
}
// autocovariance_to_wv
arma::vec autocovariance_to_wv(const arma::vec& acf, const arma::vec& tau);
RcppExport SEXP _gmwmx2_autocovariance_to_wv(SEXP acfSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type acf(acfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(autocovariance_to_wv(acf, tau));
    return rcpp_result_gen;
END_RCPP
}
// get_mean_per_diag_I_minus_H_Sigma_cpp_4
arma::vec get_mean_per_diag_I_minus_H_Sigma_cpp_4(const arma::mat& mat_I_minus_H, const arma::mat& mat_Sigma);
RcppExport SEXP _gmwmx2_get_mean_per_diag_I_minus_H_Sigma_cpp_4(SEXP mat_I_minus_HSEXP, SEXP mat_SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat_I_minus_H(mat_I_minus_HSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mat_Sigma(mat_SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mean_per_diag_I_minus_H_Sigma_cpp_4(mat_I_minus_H, mat_Sigma));
    return rcpp_result_gen;
END_RCPP
}
// objective_function_wn_flicker_eps_hat_cpp
arma::vec objective_function_wn_flicker_eps_hat_cpp(const arma::vec theta, const arma::vec scales, const arma::vec wv_var, const arma::vec wv_ci_up, const arma::vec wv_ci_low, const int n, const arma::mat& Q_matrix);
RcppExport SEXP _gmwmx2_objective_function_wn_flicker_eps_hat_cpp(SEXP thetaSEXP, SEXP scalesSEXP, SEXP wv_varSEXP, SEXP wv_ci_upSEXP, SEXP wv_ci_lowSEXP, SEXP nSEXP, SEXP Q_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type wv_var(wv_varSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type wv_ci_up(wv_ci_upSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type wv_ci_low(wv_ci_lowSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q_matrix(Q_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(objective_function_wn_flicker_eps_hat_cpp(theta, scales, wv_var, wv_ci_up, wv_ci_low, n, Q_matrix));
    return rcpp_result_gen;
END_RCPP
}
// objective_function_wn_flicker_eps_hat_cpp_2
arma::vec objective_function_wn_flicker_eps_hat_cpp_2(const arma::vec theta, const arma::vec scales, const arma::vec wv_var, const arma::vec wv_ci_up, const arma::vec wv_ci_low, const int n, const arma::mat& Q_matrix);
RcppExport SEXP _gmwmx2_objective_function_wn_flicker_eps_hat_cpp_2(SEXP thetaSEXP, SEXP scalesSEXP, SEXP wv_varSEXP, SEXP wv_ci_upSEXP, SEXP wv_ci_lowSEXP, SEXP nSEXP, SEXP Q_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type wv_var(wv_varSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type wv_ci_up(wv_ci_upSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type wv_ci_low(wv_ci_lowSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q_matrix(Q_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(objective_function_wn_flicker_eps_hat_cpp_2(theta, scales, wv_var, wv_ci_up, wv_ci_low, n, Q_matrix));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gmwmx2_gen_flicker", (DL_FUNC) &_gmwmx2_gen_flicker, 2},
    {"_gmwmx2_create_var_cov_flicker", (DL_FUNC) &_gmwmx2_create_var_cov_flicker, 2},
    {"_gmwmx2_create_U_flicker", (DL_FUNC) &_gmwmx2_create_U_flicker, 1},
    {"_gmwmx2_mean_all_diagonals", (DL_FUNC) &_gmwmx2_mean_all_diagonals, 1},
    {"_gmwmx2_mean_all_upper_diagonals", (DL_FUNC) &_gmwmx2_mean_all_upper_diagonals, 1},
    {"_gmwmx2_compute_h_cpp", (DL_FUNC) &_gmwmx2_compute_h_cpp, 2},
    {"_gmwmx2_return_cumsum_product_of_shifted_vector_cpp", (DL_FUNC) &_gmwmx2_return_cumsum_product_of_shifted_vector_cpp, 2},
    {"_gmwmx2_vec_mean_autocov_per_diag_cpp", (DL_FUNC) &_gmwmx2_vec_mean_autocov_per_diag_cpp, 2},
    {"_gmwmx2_vec_mean_autocov_per_diag_2_cpp", (DL_FUNC) &_gmwmx2_vec_mean_autocov_per_diag_2_cpp, 2},
    {"_gmwmx2_var_cov_powerlaw_cpp", (DL_FUNC) &_gmwmx2_var_cov_powerlaw_cpp, 3},
    {"_gmwmx2_wn_autocovariance", (DL_FUNC) &_gmwmx2_wn_autocovariance, 2},
    {"_gmwmx2_fast_toeplitz_matrix_from_vector_cpp", (DL_FUNC) &_gmwmx2_fast_toeplitz_matrix_from_vector_cpp, 1},
    {"_gmwmx2_compute_power_of_a_base", (DL_FUNC) &_gmwmx2_compute_power_of_a_base, 2},
    {"_gmwmx2_autocovariance_to_wv", (DL_FUNC) &_gmwmx2_autocovariance_to_wv, 2},
    {"_gmwmx2_get_mean_per_diag_I_minus_H_Sigma_cpp_4", (DL_FUNC) &_gmwmx2_get_mean_per_diag_I_minus_H_Sigma_cpp_4, 2},
    {"_gmwmx2_objective_function_wn_flicker_eps_hat_cpp", (DL_FUNC) &_gmwmx2_objective_function_wn_flicker_eps_hat_cpp, 7},
    {"_gmwmx2_objective_function_wn_flicker_eps_hat_cpp_2", (DL_FUNC) &_gmwmx2_objective_function_wn_flicker_eps_hat_cpp_2, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_gmwmx2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
